# -*- coding: utf-8 -*-
"""Real-Time Data Processing System for Weather Monitoring with Rollups and Aggregates

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Rg5pqz0a37hfntcoRTihll1eIzJ7Ooz8
"""

import requests
from datetime import datetime

# OpenWeatherMap API key and list of cities
API_KEY = "a4a2dc6f7abf3f501cf15eb7988e0e81"
cities = ["Delhi", "Mumbai", "Chennai", "Bangalore", "Kolkata", "Hyderabad"]

# Convert temperature from Kelvin to Celsius
def kelvin_to_celsius(kelvin_temp):
    return kelvin_temp - 273.15

# Dictionary to store weather data for each city
weather_data = {city: [] for city in cities}

# Fetch weather data for a city
def fetch_weather(city):
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        process_weather_data(city, data)
    else:
        print(f"Failed to retrieve data for {city}")

# Process the weather data (parse and store)
def process_weather_data(city, data):
    temp = kelvin_to_celsius(data['main']['temp'])
    feels_like = kelvin_to_celsius(data['main']['feels_like'])
    humidity = data['main']['humidity']
    wind_speed = data['wind']['speed']
    pressure = data['main'].get('pressure', 'N/A')  # Optional: Add more fields
    visibility = data.get('visibility', 'N/A')
    weather_condition = data['weather'][0]['main']
    timestamp = datetime.utcfromtimestamp(data['dt']).strftime('%Y-%m-%d %H:%M:%S')

    # Append data to the city’s weather data list
    weather_data[city].append({
        'temp': temp,
        'feels_like': feels_like,
        'humidity': humidity,
        'wind_speed': wind_speed,
        'pressure': pressure,
        'visibility': visibility,
        'condition': weather_condition,
        'timestamp': timestamp
    })

# Calculate daily rollups (avg, min, max for all parameters)
def calculate_daily_summary():
    for city, data in weather_data.items():
        if not data:
            continue

        # Temperature Aggregates
        avg_temp = sum([d['temp'] for d in data]) / len(data)
        max_temp = max([d['temp'] for d in data])
        min_temp = min([d['temp'] for d in data])

        # Humidity Aggregates
        avg_humidity = sum([d['humidity'] for d in data]) / len(data)
        max_humidity = max([d['humidity'] for d in data])
        min_humidity = min([d['humidity'] for d in data])

        # Wind Speed Aggregates
        avg_wind_speed = sum([d['wind_speed'] for d in data]) / len(data)
        max_wind_speed = max([d['wind_speed'] for d in data])
        min_wind_speed = min([d['wind_speed'] for d in data])

        # Calculate dominant weather condition
        condition_count = {}
        for entry in data:
            condition = entry['condition']
            condition_count[condition] = condition_count.get(condition, 0) + 1

        dominant_condition = max(condition_count, key=condition_count.get)

        # Print or store summary for each city
        print(f"Daily summary for {city}:")
        print(f"Avg Temp: {avg_temp:.2f}°C | Max Temp: {max_temp:.2f}°C | Min Temp: {min_temp:.2f}°C")
        print(f"Avg Humidity: {avg_humidity:.2f}% | Max Humidity: {max_humidity}% | Min Humidity: {min_humidity}%")
        print(f"Avg Wind Speed: {avg_wind_speed:.2f} m/s | Max Wind Speed: {max_wind_speed:.2f} m/s | Min Wind Speed: {min_wind_speed:.2f} m/s")
        print(f"Dominant Condition: {dominant_condition}")
        print("-" * 40)

    # Reset daily data
    for city in weather_data:
        weather_data[city] = []

# Main loop to fetch and display weather data for all cities
if __name__ == "__main__":
    for city in cities:
        fetch_weather(city)
    calculate_daily_summary()